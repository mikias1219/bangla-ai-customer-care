name: Deploy Bangla AI Customer Care

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOMAIN: bdchatpro.com
  FRONTEND_PORT: 3002
  BACKEND_PORT: 8000
  SSH_HOST: ${{ secrets.VPS_HOST }}
  SSH_USER: ${{ secrets.VPS_USER }}
  SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
  SSL_EMAIL: ${{ secrets.SSL_EMAIL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" | tr -d '\r' | sed 's/^ *//;s/ *$//' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          if ! ssh-keygen -l -f ~/.ssh/id_rsa > /dev/null 2>&1; then
            echo "❌ Invalid SSH key format"
            exit 1
          fi
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 $SSH_USER@$SSH_HOST "echo 'SSH connection successful'"

      - name: Prepare Server for Deployment
        run: |
          echo "🧹 Running server cleanup and fixes..."
          scp -o StrictHostKeyChecking=no deploy/cleanup-server.sh $SSH_USER@$SSH_HOST:/tmp/
          scp -o StrictHostKeyChecking=no deploy/fix-dpkg.sh $SSH_USER@$SSH_HOST:/tmp/
          scp -o StrictHostKeyChecking=no deploy/quick-fix-nodejs.sh $SSH_USER@$SSH_HOST:/tmp/
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "chmod +x /tmp/cleanup-server.sh /tmp/fix-dpkg.sh /tmp/quick-fix-nodejs.sh && sudo /tmp/fix-dpkg.sh && sudo /tmp/quick-fix-nodejs.sh && sudo /tmp/cleanup-server.sh"

      - name: System Update and Package Installation
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            echo "🔄 Updating system packages..."
            sudo apt update && sudo apt upgrade -y

            echo "📦 Installing required packages..."
            sudo apt install -y nginx python3 python3-pip python3-venv curl

            echo "🔍 Verifying installations..."
            node --version && echo "✅ Node.js: \$(node --version)"
            npm --version && echo "✅ npm: \$(npm --version)"
            python3 --version && echo "✅ Python: \$(python3 --version)"
            pip3 --version && echo "✅ pip: \$(pip3 --version)"
            nginx -v && echo "✅ Nginx installed"

            echo "✅ System update and package installation completed"
          EOF

      - name: Setup SSL Certificates
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            echo "🔒 Installing Certbot for SSL certificates..."
            sudo apt install -y certbot python3-certbot-nginx

            # Check if SSL email is provided
            if [ -z "\$SSL_EMAIL" ] || [ "\$SSL_EMAIL" = "" ]; then
              echo "⚠️  SSL_EMAIL not provided, skipping SSL certificate setup"
              echo "   You can manually run: sudo certbot --nginx -d $DOMAIN -d www.\$DOMAIN"
              exit 0
            fi

            echo "📜 Obtaining SSL certificate for $DOMAIN..."
            sudo certbot certonly --standalone \
              --non-interactive \
              --agree-tos \
              --email "\$SSL_EMAIL" \
              -d "$DOMAIN" \
              -d "www.$DOMAIN"
            echo "✅ SSL certificates setup completed"
          EOF

      - name: Create Project Directory and Setup
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            echo "📁 Creating project directory..."
            sudo mkdir -p /opt/bangla-ai-customer-care
            sudo chown \$USER:\$USER /opt/bangla-ai-customer-care
            echo "🛑 Stopping existing services..."
            sudo systemctl stop bangla-frontend 2>/dev/null || true
            sudo systemctl stop bangla-backend 2>/dev/null || true
            echo "✅ Project directory setup completed"
          EOF

      - name: Deploy Backend
        run: |
          # First, copy the backend files to the server
          scp -o StrictHostKeyChecking=no -r backend $SSH_USER@$SSH_HOST:/tmp/

          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            echo "🔧 Setting up backend..."
            cd /opt/bangla-ai-customer-care
            echo "📋 Copying backend files..."
            cp -r /tmp/backend .
            echo "🐍 Installing backend dependencies..."
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install fastapi uvicorn sqlalchemy alembic redis httpx aiohttp requests python-jose passlib python-multipart prometheus-client openai python-dateutil pytz fuzzywuzzy python-levenshtein numpy
            echo "⚙️ Creating environment configuration..."
            cat > .env << ENV_EOF
            BANG_OPENAI_API_KEY=$OPENAI_API_KEY
            BANG_DATABASE_URL=sqlite:///./bangla.db
            BANG_SECRET_KEY=\$(openssl rand -hex 32)
            BANG_CORS_ORIGINS=["https://$DOMAIN", "http://localhost:3000"]
            BANG_REDIS_URL=redis://localhost:6379/0
            ENV_EOF
            echo "✅ Backend deployment completed"
          EOF

      - name: Deploy Frontend
        run: |
          # First, copy the frontend files to the server
          scp -o StrictHostKeyChecking=no -r frontend $SSH_USER@$SSH_HOST:/tmp/

          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            echo "🎨 Setting up frontend..."
            cd /opt/bangla-ai-customer-care
            echo "📋 Copying frontend files..."
            cp -r /tmp/frontend .
            echo "📦 Installing Node.js dependencies..."
            cd frontend
            npm install
            echo "🔨 Building React application..."
            if [ -d "dashboard" ]; then
              cd dashboard
              npm install
              npm run build
              cd ..
              cp -r dashboard/dist/* . 2>/dev/null || true
            fi
            cd ..
            echo "✅ Frontend deployment completed"
          EOF

      - name: Configure Nginx
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            echo "⚙️ Configuring Nginx..."

            # Check if SSL certificates exist
            if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
              echo "🔒 SSL certificates found, configuring HTTPS and HTTP with redirect..."
              REDIRECT="return 301 https://\$server_name\$request_uri;"
              SSL_SERVER="server {
                listen 443 ssl http2;
                listen [::]:443 ssl http2;
                server_name $DOMAIN www.$DOMAIN;

                ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers HIGH:!aNULL:!MD5;
                ssl_prefer_server_ciphers on;
                ssl_session_cache shared:SSL:10m;
                ssl_session_timeout 10m;

                location / {
                    proxy_pass http://127.0.0.1:$FRONTEND_PORT;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_buffering off;
                    proxy_request_buffering off;
                }

                location /api/ {
                    proxy_pass http://127.0.0.1:$BACKEND_PORT/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                }

                location /channels/ {
                    proxy_pass http://127.0.0.1:$BACKEND_PORT/channels/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }

                location /health {
                    proxy_pass http://127.0.0.1:$BACKEND_PORT/health;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                }

                gzip on;
                gzip_vary on;
                gzip_min_length 1024;
                gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/json application/javascript;
            }"
            else
              echo "⚠️  SSL certificates not found, configuring HTTP only..."
              echo "   Run: sudo certbot --nginx -d $DOMAIN -d www.\$DOMAIN"
              REDIRECT="# HTTP only - no SSL redirect"
              SSL_SERVER=""
            fi

            sudo tee /etc/nginx/sites-available/bangla > /dev/null << NGINX_EOF
            server {
                listen 80;
                listen [::]:80;
                server_name $DOMAIN www.$DOMAIN;

                \$REDIRECT

                location / {
                    proxy_pass http://127.0.0.1:$FRONTEND_PORT;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_buffering off;
                    proxy_request_buffering off;
                }

                location /api/ {
                    proxy_pass http://127.0.0.1:$BACKEND_PORT/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                }

                location /channels/ {
                    proxy_pass http://127.0.0.1:$BACKEND_PORT/channels/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }

                location /health {
                    proxy_pass http://127.0.0.1:$BACKEND_PORT/health;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                }

                gzip on;
                gzip_vary on;
                gzip_min_length 1024;
                gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/json application/javascript;
            }

            \$SSL_SERVER
            NGINX_EOF

            sudo ln -sf /etc/nginx/sites-available/bangla /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t && sudo systemctl reload nginx
            echo "✅ Nginx configuration completed"
          EOF

      - name: Setup Systemd Services
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            echo "🔄 Setting up systemd services..."

            # Determine the correct Node.js path
            if command -v node &> /dev/null; then
              NODE_BIN=\$(which node)
            elif [ -x "/usr/bin/node" ]; then
              NODE_BIN="/usr/bin/node"
            else
              echo "❌ Cannot determine Node.js binary path"
              exit 1
            fi
            echo "📍 Using Node.js binary: \$NODE_BIN"

            # Create frontend service file
            printf '[Unit]\nDescription=Bangla Frontend (Node.js)\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nWorkingDirectory=/opt/bangla-ai-customer-care/frontend\nExecStart=%s server.js\nRestart=always\nRestartSec=5\nEnvironment=PORT=%s\nStandardOutput=journal\nStandardError=journal\n\n[Install]\nWantedBy=multi-user.target\n' "\$NODE_BIN" "$FRONTEND_PORT" > /tmp/bangla-frontend.service

            # Create backend service file
            printf '[Unit]\nDescription=Bangla Backend (FastAPI)\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nWorkingDirectory=/opt/bangla-ai-customer-care/backend\nEnvironment=PATH=/opt/bangla-ai-customer-care/backend/venv/bin\nExecStart=/opt/bangla-ai-customer-care/backend/venv/bin/python -m uvicorn app.main:app --host 127.0.0.1 --port %s\nRestart=always\nRestartSec=5\nStandardOutput=journal\nStandardError=journal\n\n[Install]\nWantedBy=multi-user.target\n' "$BACKEND_PORT" > /tmp/bangla-backend.service

            # Move service files to systemd directory
            sudo mv /tmp/bangla-frontend.service /etc/systemd/system/
            sudo mv /tmp/bangla-backend.service /etc/systemd/system/

            sudo systemctl daemon-reload
            sudo systemctl enable bangla-frontend
            sudo systemctl enable bangla-backend
            echo "✅ Systemd services setup completed"
          EOF

      - name: Start Services and Test Deployment
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            echo "▶️ Starting services..."

            # Validate service files before starting
            echo "🔍 Validating systemd service files..."
            if [ -f "/etc/systemd/system/bangla-frontend.service" ]; then
              echo "✅ Frontend service file exists"
              sudo systemd-analyze verify bangla-frontend.service || echo "⚠️ Frontend service file has warnings"
            else
              echo "❌ Frontend service file missing"
              exit 1
            fi

            if [ -f "/etc/systemd/system/bangla-backend.service" ]; then
              echo "✅ Backend service file exists"
              sudo systemd-analyze verify bangla-backend.service || echo "⚠️ Backend service file has warnings"
            else
              echo "❌ Backend service file missing"
              exit 1
            fi

            # Check if server.js exists and make it executable
            if [ -f "/opt/bangla-ai-customer-care/frontend/server.js" ]; then
              echo "✅ server.js file exists"
              chmod +x /opt/bangla-ai-customer-care/frontend/server.js
              echo "✅ Made server.js executable"

              # Check if node is available
              if command -v node &> /dev/null; then
                echo "✅ Node.js is available: $(node --version)"
                NODE_PATH=$(which node)
                echo "📍 Node.js path: $NODE_PATH"
              else
                echo "❌ Node.js not found in PATH"
                which node || echo "Node.js not found"
                # Try common Node.js paths
                if [ -x "/usr/bin/node" ]; then
                  NODE_PATH="/usr/bin/node"
                  echo "📍 Found Node.js at: $NODE_PATH"
                elif [ -x "/usr/local/bin/node" ]; then
                  NODE_PATH="/usr/local/bin/node"
                  echo "📍 Found Node.js at: $NODE_PATH"
                else
                  echo "❌ Node.js not found in common locations"
                  exit 1
                fi
              fi
            else
              echo "❌ server.js file missing"
              exit 1
            fi

            # Check if backend app exists
            if [ -f "/opt/bangla-ai-customer-care/backend/app/main.py" ]; then
              echo "✅ Backend main.py exists"
            else
              echo "❌ Backend main.py missing"
              exit 1
            fi

            echo "🚀 Starting services..."
            sudo systemctl start bangla-frontend
            sudo systemctl start bangla-backend

            echo "🧪 Testing deployment..."
            sleep 10

            echo "📊 Services status:"
            sudo systemctl status bangla-frontend --no-pager -l || echo "❌ Frontend status check failed"
            sudo systemctl status bangla-backend --no-pager -l || echo "❌ Backend status check failed"

            echo "🌐 Testing endpoints..."
            if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
              # Test HTTPS
              curl -k https://$DOMAIN/health 2>/dev/null && echo "✅ HTTPS health check passed" || echo "❌ HTTPS health check failed"
              curl -I https://$DOMAIN 2>/dev/null | head -1 && echo "✅ HTTPS working" || echo "❌ HTTPS failed"
            else
              # Test HTTP
              curl http://$DOMAIN/health 2>/dev/null && echo "✅ HTTP health check passed" || echo "❌ HTTP health check failed"
              curl -I http://$DOMAIN 2>/dev/null | head -1 && echo "✅ HTTP working" || echo "❌ HTTP failed"
              echo "⚠️  SSL not configured - configure manually: sudo certbot --nginx -d $DOMAIN -d www.\$DOMAIN"
            fi

            echo "✅ Deployment completed successfully!"
            if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
              echo "🌐 Frontend: https://$DOMAIN (port $FRONTEND_PORT)"
              echo "🔒 SSL: Let's Encrypt certificate active"
            else
              echo "🌐 Frontend: http://$DOMAIN (port $FRONTEND_PORT)"
              echo "⚠️  SSL: Not configured (HTTP only)"
            fi
            echo "🔧 Backend: http://localhost:$BACKEND_PORT"
          EOF
