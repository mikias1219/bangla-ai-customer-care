name: Deploy (VPS, no Docker)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOMAIN: bdchatpro.com
  WEBROOT: /var/www/bangla

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node and build frontend
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Build dashboard
        run: |
          cd frontend/dashboard
          npm ci || npm i
          VITE_API_BASE=https://${{ env.DOMAIN }} npm run build

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Prepare remote directories
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p \"${{ secrets.VPS_PATH }}\" /tmp/bangla_upload"

      - name: Upload backend, deploy assets, and built frontend
        run: |
          scp -i ~/.ssh/id_rsa -r backend ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/bangla_upload/
          scp -i ~/.ssh/id_rsa -r deploy ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/bangla_upload/
          scp -i ~/.ssh/id_rsa -r frontend/dashboard/dist ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/bangla_upload/

      - name: Remote deploy & restart
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "bash -s" << 'EOF'
          set -euo pipefail

          DOMAIN='${{ env.DOMAIN }}'
          WEBROOT='${{ env.WEBROOT }}'
          VPS_PATH='${{ secrets.VPS_PATH }}'
          VPS_USER='${{ secrets.VPS_USER }}'
          OPENAI_API_KEY='${OPENAI_API_KEY}'

          sudo apt-get update
          sudo apt-get install -y python3-venv python3-pip nginx

          # Move uploaded payload into place
          sudo rsync -a /tmp/bangla_upload/backend/ "$VPS_PATH"/backend/
          sudo rsync -a /tmp/bangla_upload/deploy/ "$VPS_PATH"/deploy/
          sudo mkdir -p "$WEBROOT"
          sudo rsync -az /tmp/bangla_upload/dist/ "$WEBROOT"/

          # .env for backend
          cat > "$VPS_PATH/.env" <<EOT
          BANG_DATABASE_URL=sqlite:///./bangla.db
          BANG_CORS_ORIGINS=["https://$DOMAIN","http://localhost:5173"]
          BANG_OPENAI_API_KEY=$OPENAI_API_KEY
          BANG_OPENAI_MODEL=gpt-4
          EOT

          # Render systemd unit
          sudo bash -c "sed -e 's#{{USER}}#'\"$VPS_USER\"'#g' -e 's#{{APP_PATH}}#'\"$VPS_PATH\"'#g' \"$VPS_PATH/deploy/systemd/bangla-backend.service\" > /etc/systemd/system/bangla-backend.service"

          # Backend venv + install
          cd "$VPS_PATH/backend"
          python3 -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          python scripts/init_db.py || true
          deactivate

          sudo systemctl daemon-reload
          sudo systemctl enable --now bangla-backend

          # Render nginx config
          sudo bash -c "sed -e 's#{{DOMAIN}}#'\"$DOMAIN\"'#g' -e 's#{{WEBROOT}}#'\"$WEBROOT\"'#g' \"$VPS_PATH/deploy/nginx.bangla.conf\" > /etc/nginx/sites-available/bangla"
          sudo ln -sf /etc/nginx/sites-available/bangla /etc/nginx/sites-enabled/bangla
          sudo rm -f /etc/nginx/sites-enabled/default || true
          sudo nginx -t
          sudo systemctl reload nginx
          EOF

      - name: Issue HTTPS certificate (optional)
        if: ${{ secrets.LETSENCRYPT_EMAIL != '' }}
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "sudo certbot --nginx -n --agree-tos -m '${{ secrets.LETSENCRYPT_EMAIL }}' -d ${{ env.DOMAIN }} -d www.${{ env.DOMAIN }} || true"

name: CI/CD - Build, Push, and Deploy

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/bangla-backend
  DASHBOARD_IMAGE: ghcr.io/${{ github.repository_owner }}/bangla-dashboard

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
            ${{ env.BACKEND_IMAGE }}:latest

      - name: Build and push dashboard image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend/dashboard
          file: ./frontend/dashboard/Dockerfile.prod
          push: true
          tags: |
            ${{ env.DASHBOARD_IMAGE }}:${{ github.sha }}
            ${{ env.DASHBOARD_IMAGE }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy deploy directory to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "deploy/*"
          target: ${{ secrets.DEPLOY_PATH }}

      - name: Run remote deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            cd ${{ secrets.DEPLOY_PATH }}
            if [ ! -f .env ]; then
              echo "Missing .env in ${{ secrets.DEPLOY_PATH }}. Copy env.prod to .env and configure." >&2
              exit 1
            fi
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker compose -f docker-compose.prod.yml pull || true
            bash deploy.sh