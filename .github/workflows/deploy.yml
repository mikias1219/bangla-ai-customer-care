name: Deploy (VPS, no Docker)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOMAIN: bdchatpro.com
  WEBROOT: /var/www/bangla

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build frontend dashboard
        run: |
          cd frontend/dashboard
          npm ci || npm i
          VITE_API_BASE=https://${{ env.DOMAIN }} npm run build

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Write the SSH key to file
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          # Add VPS to known_hosts
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          # Test SSH connection
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"
          cat ~/.ssh/known_hosts

      - name: Prepare remote directories
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "rm -rf /tmp/bangla_upload && mkdir -p /tmp/bangla_upload/backend /tmp/bangla_upload/deploy /tmp/bangla_upload/dist '${{ secrets.VPS_PATH }}'"

      - name: Upload backend files
        run: |
          echo "üì¶ Uploading backend..."
          rsync -avz -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" backend/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/bangla_upload/backend/
          echo "‚úÖ Backend uploaded"

      - name: Upload deploy scripts
        run: |
          echo "üì¶ Uploading deploy scripts..."
          rsync -avz -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" deploy/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/bangla_upload/deploy/
          echo "‚úÖ Deploy scripts uploaded"

      - name: Upload frontend dist
        run: |
          echo "üì¶ Uploading frontend..."
          rsync -avz -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" frontend/dashboard/dist/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/bangla_upload/dist/
          echo "‚úÖ Frontend uploaded"
      
      - name: Verify uploads
        run: |
          echo "üîç Verifying uploaded files..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "ls -la /tmp/bangla_upload/ && ls -la /tmp/bangla_upload/backend/ && ls -la /tmp/bangla_upload/deploy/ && ls -la /tmp/bangla_upload/dist/"

      - name: Remote deploy & restart
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} bash -s "$OPENAI_API_KEY" <<'ENDSSH'
            set -euo pipefail

            DOMAIN="bdchatpro.com"
            WEBROOT="/var/www/bangla"
            VPS_PATH="${{ secrets.VPS_PATH }}"
            OPENAI_API_KEY="$1"

            echo "üöÄ Starting deployment to bdchatpro.com..."
            
            # Install required packages
            echo "üì¶ Installing required packages..."
            sudo apt-get update -qq
            sudo apt-get install -y python3-venv python3-pip nginx rsync certbot python3-certbot-nginx

            # Verify uploaded files exist
            echo "üîç Verifying uploaded files..."
            if [ ! -d /tmp/bangla_upload/backend ]; then
              echo "‚ùå Error: Backend files not found in /tmp/bangla_upload/backend"
              exit 1
            fi
            if [ ! -d /tmp/bangla_upload/deploy ]; then
              echo "‚ùå Error: Deploy files not found in /tmp/bangla_upload/deploy"
              exit 1
            fi
            if [ ! -d /tmp/bangla_upload/dist ]; then
              echo "‚ùå Error: Frontend dist not found in /tmp/bangla_upload/dist"
              exit 1
            fi
            echo "‚úÖ All files verified"

            # Move uploaded files to final destination
            echo "üìÇ Deploying backend files..."
            sudo mkdir -p "$VPS_PATH"/backend "$VPS_PATH"/deploy
            sudo rsync -a /tmp/bangla_upload/backend/ "$VPS_PATH"/backend/
            sudo rsync -a /tmp/bangla_upload/deploy/ "$VPS_PATH"/deploy/
            
            echo "üìÇ Deploying frontend files..."
            sudo mkdir -p "$WEBROOT"
            sudo rsync -az /tmp/bangla_upload/dist/ "$WEBROOT"/

            # Fix ownership
            sudo chown -R ${{ secrets.VPS_USER }}:${{ secrets.VPS_USER }} "$VPS_PATH"
            sudo chown -R www-data:www-data "$WEBROOT"

            # Create .env file with proper configuration
            echo "‚öôÔ∏è  Configuring environment..."
            {
              echo "BANG_DATABASE_URL=sqlite:///./bangla.db"
              echo "BANG_CORS_ORIGINS=[\"https://bdchatpro.com\",\"https://www.bdchatpro.com\",\"http://localhost:5173\"]"
              echo "BANG_OPENAI_API_KEY=${OPENAI_API_KEY}"
              echo "BANG_OPENAI_MODEL=gpt-4o-mini"
              echo "BANG_OPENAI_MAX_TOKENS=1000"
              echo "BANG_NLU_MODEL_NAME=sagorsarker/bangla-bert-base"
              echo "BANG_SECRET_KEY=$(openssl rand -hex 32)"
              echo "BANG_ALGORITHM=HS256"
              echo "BANG_ACCESS_TOKEN_EXPIRE_MINUTES=60"
            } > "$VPS_PATH/.env"

            # Setup systemd service
            echo "üîß Setting up systemd service..."
            sudo sed -e "s#{{USER}}#${{ secrets.VPS_USER }}#g" -e "s#{{APP_PATH}}#${VPS_PATH}#g" \
              "$VPS_PATH/deploy/systemd/bangla-backend.service" | \
              sudo tee /etc/systemd/system/bangla-backend.service > /dev/null

            # Setup backend virtualenv and install dependencies
            echo "üêç Setting up Python environment..."
            cd "$VPS_PATH/backend"
            if [ ! -d .venv ]; then
              python3 -m venv .venv
            fi
            . .venv/bin/activate
            pip install --upgrade pip -q
            pip install -r requirements.txt -q
            
            echo "üóÑÔ∏è  Initializing database..."
            python scripts/init_db.py || true
            
            echo "üõçÔ∏è  Adding sample products..."
            python scripts/add_sample_products.py || true
            
            deactivate

            # Restart backend service
            echo "üîÑ Restarting backend service..."
            sudo systemctl daemon-reload
            sudo systemctl enable bangla-backend
            sudo systemctl restart bangla-backend
            sleep 3
            
            # Check if backend is running
            if sudo systemctl is-active --quiet bangla-backend; then
              echo "‚úÖ Backend service is running"
            else
              echo "‚ùå Backend service failed to start"
              sudo systemctl status bangla-backend --no-pager || true
            fi

            # Setup Nginx
            echo "üåê Configuring Nginx for bdchatpro.com..."
            sudo sed -e "s#{{DOMAIN}}#${DOMAIN}#g" -e "s#{{WEBROOT}}#${WEBROOT}#g" \
              "$VPS_PATH/deploy/nginx.bangla.conf" | \
              sudo tee /etc/nginx/sites-available/bangla > /dev/null
            
            # Remove old symbolic link if exists
            sudo rm -f /etc/nginx/sites-enabled/bangla
            
            # Create new symbolic link
            sudo ln -s /etc/nginx/sites-available/bangla /etc/nginx/sites-enabled/bangla
            
            # Remove default nginx site (this might be conflicting)
            sudo rm -f /etc/nginx/sites-enabled/default
            
            echo "üìã Enabled Nginx sites:"
            ls -la /etc/nginx/sites-enabled/
            
            # Test nginx config
            if sudo nginx -t; then
              echo "‚úÖ Nginx configuration is valid"
              sudo systemctl reload nginx
              echo "‚úÖ Nginx reloaded successfully"
            else
              echo "‚ùå Nginx configuration error - check logs"
              sudo nginx -t 2>\u00261
              exit 1
            fi
            
            # Verify frontend files are in place
            echo "üìÇ Frontend files check:"
            ls -lah "$WEBROOT" | head -10

            # Clean up
            rm -rf /tmp/bangla_upload /tmp/bangla_upload_old

            echo ""
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Your site is now live at: https://$DOMAIN"
            echo ""
          ENDSSH

      - name: Setup HTTPS with Let's Encrypt
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} bash -s <<'ENDSSH'
            set -euo pipefail
            
            DOMAIN="bdchatpro.com"
            LETSENCRYPT_EMAIL="${{ vars.LETSENCRYPT_EMAIL }}"
            
            echo "üîí Setting up HTTPS certificate..."
            
            if [ -n "${LETSENCRYPT_EMAIL:-}" ]; then
              echo "üìß Using email: $LETSENCRYPT_EMAIL"
              sudo certbot --nginx -n --agree-tos -m "$LETSENCRYPT_EMAIL" \
                -d "$DOMAIN" -d "www.$DOMAIN" || echo "‚ö†Ô∏è  SSL cert setup failed or already exists"
            else
              echo "‚ö†Ô∏è  LETSENCRYPT_EMAIL not set. Skipping SSL certificate generation."
              echo "   You can add it later in repository variables."
            fi
            
            echo "‚úÖ SSL setup complete"
          ENDSSH
      
      - name: Verify deployment
        run: |
          echo "üéâ Deployment Summary"
          echo "===================="
          echo "‚úÖ Frontend deployed to: https://bdchatpro.com"
          echo "‚úÖ Backend API: https://bdchatpro.com/api/"
          echo "‚úÖ API Docs: https://bdchatpro.com/api/docs"
          echo "‚úÖ Health Check: https://bdchatpro.com/health"
          echo ""
          echo "üîç Testing health endpoint..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "curl -f http://localhost:8000/health || echo '‚ö†Ô∏è  Health check failed'"
