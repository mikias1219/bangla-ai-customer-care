name: Deploy (VPS, no Docker)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOMAIN: bdchatpro.com
  WEBROOT: /var/www/bangla

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build frontend dashboard
        run: |
          cd frontend/dashboard
          npm ci || npm i
          VITE_API_BASE=https://${{ env.DOMAIN }} npm run build

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Write the SSH key to file
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          # Add VPS to known_hosts
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          # Test SSH connection
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"
          cat ~/.ssh/known_hosts

      - name: Prepare remote directories
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "mkdir -p '${{ secrets.VPS_PATH }}' /tmp/bangla_upload"

      - name: Upload backend, deploy scripts, and built frontend
        run: |
          rsync -avz -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" --delete backend/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/bangla_upload/backend/
          rsync -avz -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" --delete deploy/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/bangla_upload/deploy/
          rsync -avz -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" --delete frontend/dashboard/dist/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/bangla_upload/dist/

      - name: Remote deploy & restart
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} bash -s "$OPENAI_API_KEY" <<'ENDSSH'
            set -euo pipefail

            DOMAIN="bdchatpro.com"
            WEBROOT="/var/www/bangla"
            VPS_PATH="${{ secrets.VPS_PATH }}"
            OPENAI_API_KEY="$1"

            # Install required packages
            sudo apt-get update
            sudo apt-get install -y python3-venv python3-pip nginx rsync

            # Move uploaded files
            sudo rsync -a /tmp/bangla_upload/backend/ "$VPS_PATH"/backend/
            sudo rsync -a /tmp/bangla_upload/deploy/ "$VPS_PATH"/deploy/
            sudo mkdir -p "$WEBROOT"
            sudo rsync -az /tmp/bangla_upload/dist/ "$WEBROOT"/

            # Create .env file
            echo "BANG_DATABASE_URL=sqlite:///./bangla.db" > "$VPS_PATH/.env"
            echo "BANG_CORS_ORIGINS=[\"https://bdchatpro.com\",\"http://localhost:5173\"]" >> "$VPS_PATH/.env"
            echo "BANG_OPENAI_API_KEY=${OPENAI_API_KEY}" >> "$VPS_PATH/.env"
            echo "BANG_OPENAI_MODEL=gpt-4" >> "$VPS_PATH/.env"

            # Setup systemd service
            sudo bash -c "sed -e 's#{{USER}}#${{ secrets.VPS_USER }}#g' -e 's#{{APP_PATH}}#${VPS_PATH}#g' $VPS_PATH/deploy/systemd/bangla-backend.service > /etc/systemd/system/bangla-backend.service"

            # Setup backend virtualenv and install dependencies
            cd "$VPS_PATH/backend"
            python3 -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            python scripts/init_db.py || true
            deactivate

            # Start backend service
            sudo systemctl daemon-reload
            sudo systemctl enable --now bangla-backend

            # Setup Nginx
            sudo bash -c "sed -e 's#{{DOMAIN}}#${DOMAIN}#g' -e 's#{{WEBROOT}}#${WEBROOT}#g' $VPS_PATH/deploy/nginx.bangla.conf > /etc/nginx/sites-available/bangla"
            sudo ln -sf /etc/nginx/sites-available/bangla /etc/nginx/sites-enabled/bangla
            sudo rm -f /etc/nginx/sites-enabled/default || true
            sudo nginx -t
            sudo systemctl reload nginx
          ENDSSH

      - name: Issue HTTPS certificate (optional)
        if: ${{ vars.LETSENCRYPT_EMAIL != '' }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "sudo certbot --nginx -n --agree-tos -m '${{ vars.LETSENCRYPT_EMAIL }}' -d ${{ env.DOMAIN }} -d www.${{ env.DOMAIN }} || true"
